/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int count;
    List<Integer> list = new ArrayList<>();
    HashMap<Integer,Integer> map = new HashMap<>();
    public int[] findFrequentTreeSum(TreeNode root) {
        postorder(root);
        int[] res = new int[list.size()];
        for(int i=0;i<list.size();i++) res[i] = list.get(i);
        return res;
    }

    private int postorder(TreeNode root){
        if(root == null) return 0;
        int left = postorder(root.left);
        int right = postorder(root.right);
        int  sum = root.val+left+right;
        map.put(sum,map.getOrDefault(sum,0)+1);
        if(count < map.getOrDefault(sum,0)){
            list = new ArrayList<>();
            list.add(sum);
            count = map.getOrDefault(sum,0);
        }else if(count == map.getOrDefault(sum,0)){
            list.add(sum);
        }
        return root.val+left+right;
    }
}
