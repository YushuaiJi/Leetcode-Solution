/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
DFS method;
class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return res;
        in_order_travesal(root,0);
        return res;
    }

    private void in_order_travesal(TreeNode root, int level){
        if(root == null) return;
        if(res.size()<=level){
            List<Integer> elem = new ArrayList<>();
            res.add(elem);
            res.get(level).add(root.val);
        }else{
            res.get(level).add(root.val);
        }
        level ++;
        in_order_travesal(root.left,level);
        in_order_travesal(root.right,level);
    }
}


BFS method:
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Queue<TreeNode> q = new ArrayDeque<>();
        if(root == null) return res;
        q.offer(root);
        while(!q.isEmpty()){
            List<Integer> elem = new ArrayList<>();
            int n = q.size();
            for(int i=0;i<n;i++){
                TreeNode node = q.poll();
                elem.add(node.val);
                if(node.left != null) q.offer(node.left);
                if(node.right != null) q.offer(node.right);
            }
            res.add(elem);
        }
        return res;
    }
}
