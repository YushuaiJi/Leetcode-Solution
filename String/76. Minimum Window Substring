class Solution {
    public String minWindow(String s, String t) {
        // corner case
        if(s == null || t == null || s.length() == 0 || t.length() == 0 || s.length() < t.length()) return "";
        
        // construct model
        int minLeft = 0;
        int minRight = 0;
        int min = s.length();
        boolean flag = false;
        
        Map<Character, Integer> map = new HashMap<>();
        int count = t.length(); //我们需要匹配的count长度。
        for(char c : t.toCharArray()) map.put(c, map.getOrDefault(c, 0) + 1);//把需要匹配的字符串的不同字符的个数转化为map里面的value
        
        // unfixed sliding window, 2 pointers
        int i = 0;//前指针
        int j = 0;//后指针
        while(j < s.length()){
            char c = s.charAt(j);
            if(map.containsKey(c)){
                map.put(c, map.get(c) - 1);
                if(map.get(c) >= 0) count--; //说明该char是t里面我们需要匹配的其中一个，故而count--,同时为什么>=0,因为可能一段string中有很多重复字母，小于0说明这个字母有多余
            }
            
            // if found a susbtring
            while(count == 0 && i <= j){
                // update global min
                flag = true;
                int curLen = j + 1 - i;//计算这段路经changdu
                if(curLen <= min){
                    minLeft = i;
                    minRight = j;
                    min = curLen;
                }
                
                // shrink left pointer
                char leftC = s.charAt(i);
                if(map.containsKey(leftC)){
                    map.put(leftC, map.get(leftC) + 1);
                    if(map.get(leftC) >= 1) count++;//大于零说明这个字母有需求
                }
                i++;
            } 
            j++;
        }
        
        return flag == true ? s.substring(minLeft, minRight + 1): "";
    }
}
