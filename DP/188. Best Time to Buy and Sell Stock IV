class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k>prices.length/2) return maxProfit(prices);
        int[][][] dp = new int[prices.length][2][k+1];//
        if(prices.length == 0) return 0;
        for(int i=0;i<prices.length;i++){
            for(int j=0;j<k+1;j++){
            if(i-1==-1){
                dp[i][1][0] = -prices[i];
                dp[i][0][0] = 0;
                for(int h=1;h<k+1;h++){
                    dp[i][1][h] = -100000000;
                    dp[i][0][h] = -100000000;
                }
                continue;
            }
            if(j==0){
            dp[i][0][j] = 0;
            dp[i][1][j] = Math.max(dp[i-1][1][j],dp[i-1][0][j]-prices[i]);
            continue;
            }
            if(j==k){
                 dp[i][1][j] = -200000000;
                 dp[i][0][j] = Math.max(dp[i-1][0][j],dp[i-1][1][j-1]+prices[i]);
                 continue;
            }
               dp[i][0][j] = Math.max(dp[i-1][0][j],dp[i-1][1][j-1]+prices[i]);
               dp[i][1][j] = Math.max(dp[i-1][1][j],dp[i-1][0][j]-prices[i]);
        }
        }
        int res = 0;
        for(int i=0;i<k+1;i++){
            res = Math.max(res,dp[prices.length-1][0][i]);
        }
        return res; 
    }

     public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        if(prices.length == 0) return 0;
        for(int i=0;i<prices.length;i++){
            if(i==0){
                dp[i][1] = -prices[0];
                dp[i][0] = 0;
                continue;
            }
            dp[i][1] = Math.max(dp[i-1][1],dp[i-1][0]-prices[i]);
            dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);
        }
        return dp[prices.length-1][0];
    }
}

