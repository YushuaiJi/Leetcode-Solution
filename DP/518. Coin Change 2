class Solution {
    public int change(int amount, int[] coins) {
        int[][] dp = new int[coins.length+1][amount+1];
        for(int i=0;i<coins.length+1;i++) dp[i][0] = 1;
        for(int i=1;i<coins.length+1;i++){
            for(int j=1;j<amount+1;j++){
                for(int k=0;j-k * coins[i-1]>=0;k++){
                    if(coins[i-1]<=j) dp[i][j] += dp[i-1][j-k * coins[i-1]];
                    else dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[coins.length][amount];
    }
}

dp[i][j] = dp[i - 1][j - 0 * coins[i - 1]] + 
           dp[i - 1][j - 1 * coins[i - 1]] +
           dp[i - 1][j - 2 * coins[i - 1]] + 
           ... + 
           dp[i - 1][j - k * coins[i - 1]]

dp[i][j - coins[i]] = dp[i - 1][j - coins[i] - 0 * coins[i]] + 
                      dp[i - 1][j - coins[i] - 1 * coins[i]] +
                      dp[i - 1][j - coins[i] - 2 * coins[i]] + 
                      ... + 
                      dp[i - 1][j - coins[i] - k * coins[i]]

dp[i][j - coins[i]] = dp[i - 1][j - 1 * coins[i]] + 
                      dp[i - 1][j - 2 * coins[i]] +
                      dp[i - 1][j - 3 * coins[i]] + 
                      ... + 
                      dp[i - 1][j - k * coins[i]]

dp[i][j] - dp[i][j - coins[i]] = dp[i - 1][j]


class Solution {
public:
    int change(int amount, vector<int>& coins) {
       
        vector<int> dp(amount + 1);
        dp[0] = 1; // 有一种方案凑成 0 元，那就是 一个也不选
        for(auto c : coins)
            for(int j = c; j <= amount; j++)
                dp[j] += dp[j - c];         
        return dp[amount];
    }
};
