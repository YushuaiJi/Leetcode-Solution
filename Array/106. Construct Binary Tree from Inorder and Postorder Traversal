class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int pre = preorder.length;
        int in  = inorder.length;
        return trackback(preorder,0,pre-1,inorder,0,in-1);
    }
    private TreeNode trackback(int[] preorder, int left_preorder, int right_preorder,
    int[] inorder, int left_inorder, int right_inoder){
        if(left_preorder > right_preorder || left_inorder > right_inoder) return null;
        int pivot = preorder[left_preorder];
        TreeNode root = new TreeNode(pivot);
        int pivot_root = left_inorder;
        while(root.val != inorder[pivot_root]) pivot_root ++;
        root.left = trackback(preorder,left_preorder+1,left_preorder+pivot_root-left_inorder,inorder,left_inorder,pivot_root-1);
        root.right = trackback(preorder,pivot_root-left_inorder+left_preorder+1,right_preorder,inorder, pivot_root+1,right_inoder);
        return root;
    }
}
