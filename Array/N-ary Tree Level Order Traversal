/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<>();  //List<Integer> 决定了数据类别
        //generic method to generate queue
        //Queue<MyObject> queue = new LinkedList<MyObject>();
        Queue<Node> q = new LinkedList<>();
        if(root==null) return res;
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            List level = new LinkedList<>();
            for(int i= 0; i<size;i++){
                Node cur = q.peek();
                q.poll();
                level.add(cur.val);
                List<Node> Children = cur.children;
                for(Node child:Children){
                    if(child != null) q.offer(child);
                }
            }
             res.add(level);
        }
              return res;
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

 //  public static void main(String args[]) {
 //     String[] array = {"a", "b", "c", "d", "e"};

      //Method 1
 //     List<String> list = Arrays.asList(array);          
 //     System.out.println(list);

      //Method 2
 //     List<String> list1 = new ArrayList<String>();
 //    Collections.addAll(list1, array);
 //     System.out.println(list1);

      //Method 3
 //     List<String> list2 = new ArrayList<String>();
 //     for(String text:array) {
 //        list2.add(text);
  //    }
  //    System.out.println(list2);
 //  }  
//}
